/* tslint:disable */
/* eslint-disable */
/**
 * BaseWebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RemarkModel,
  StringBaseResponseModel,
  TravelDetailListResponseModel,
  TravelSummaryDataModelBaseResponseModel,
  TravelSummaryReceiveModel,
  TravelSummaryResponseModel,
  TravelSummaryRoundList,
} from '../models/index';
import {
    RemarkModelFromJSON,
    RemarkModelToJSON,
    StringBaseResponseModelFromJSON,
    StringBaseResponseModelToJSON,
    TravelDetailListResponseModelFromJSON,
    TravelDetailListResponseModelToJSON,
    TravelSummaryDataModelBaseResponseModelFromJSON,
    TravelSummaryDataModelBaseResponseModelToJSON,
    TravelSummaryReceiveModelFromJSON,
    TravelSummaryReceiveModelToJSON,
    TravelSummaryResponseModelFromJSON,
    TravelSummaryResponseModelToJSON,
    TravelSummaryRoundListFromJSON,
    TravelSummaryRoundListToJSON,
} from '../models/index';

export interface ApiTravelSummaryGetTravelSummaryDetailIdGetRequest {
    id: number;
}

export interface ApiTravelSummaryGetTravelSummaryGetRequest {
    companyPayroll?: number;
    reqRoundId?: number;
    currentStepId?: number;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiTravelSummaryGetTraveldetailReqTravelIdGetRequest {
    reqTravelId: number;
}

export interface ApiTravelSummaryGetTravelformReqTravelIdGetRequest {
    reqTravelId: number;
}

export interface ApiTravelSummaryReceiveTravelSummaryFromSAMG2PostRequest {
    body?: Array<TravelSummaryReceiveModel>;
}

export interface ApiTravelSummaryUpdateTravelSummaryDetailPostRequest {
    body?: RemarkModel;
}

/**
 * 
 */
export class TravelSummaryApi extends runtime.BaseAPI {

    /**
     */
    async apiTravelSummaryGetRequestRoundListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TravelSummaryRoundList>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/TravelSummary/get-request-round-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TravelSummaryRoundListFromJSON));
    }

    /**
     */
    async apiTravelSummaryGetRequestRoundListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TravelSummaryRoundList>> {
        const response = await this.apiTravelSummaryGetRequestRoundListGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTravelSummaryGetTravelSummaryDetailIdGetRaw(requestParameters: ApiTravelSummaryGetTravelSummaryDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TravelSummaryDataModelBaseResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTravelSummaryGetTravelSummaryDetailIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/TravelSummary/get-travel-summary-detail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TravelSummaryDataModelBaseResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiTravelSummaryGetTravelSummaryDetailIdGet(requestParameters: ApiTravelSummaryGetTravelSummaryDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TravelSummaryDataModelBaseResponseModel> {
        const response = await this.apiTravelSummaryGetTravelSummaryDetailIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTravelSummaryGetTravelSummaryGetRaw(requestParameters: ApiTravelSummaryGetTravelSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TravelSummaryResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['companyPayroll'] != null) {
            queryParameters['company_payroll'] = requestParameters['companyPayroll'];
        }

        if (requestParameters['reqRoundId'] != null) {
            queryParameters['req_round_id'] = requestParameters['reqRoundId'];
        }

        if (requestParameters['currentStepId'] != null) {
            queryParameters['current_step_id'] = requestParameters['currentStepId'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/TravelSummary/get-travel-summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TravelSummaryResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiTravelSummaryGetTravelSummaryGet(requestParameters: ApiTravelSummaryGetTravelSummaryGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TravelSummaryResponseModel> {
        const response = await this.apiTravelSummaryGetTravelSummaryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTravelSummaryGetTraveldetailReqTravelIdGetRaw(requestParameters: ApiTravelSummaryGetTraveldetailReqTravelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TravelDetailListResponseModel>>> {
        if (requestParameters['reqTravelId'] == null) {
            throw new runtime.RequiredError(
                'reqTravelId',
                'Required parameter "reqTravelId" was null or undefined when calling apiTravelSummaryGetTraveldetailReqTravelIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/TravelSummary/get-traveldetail/{req_travel_id}`.replace(`{${"req_travel_id"}}`, encodeURIComponent(String(requestParameters['reqTravelId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TravelDetailListResponseModelFromJSON));
    }

    /**
     */
    async apiTravelSummaryGetTraveldetailReqTravelIdGet(requestParameters: ApiTravelSummaryGetTraveldetailReqTravelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TravelDetailListResponseModel>> {
        const response = await this.apiTravelSummaryGetTraveldetailReqTravelIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTravelSummaryGetTravelformReqTravelIdGetRaw(requestParameters: ApiTravelSummaryGetTravelformReqTravelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['reqTravelId'] == null) {
            throw new runtime.RequiredError(
                'reqTravelId',
                'Required parameter "reqTravelId" was null or undefined when calling apiTravelSummaryGetTravelformReqTravelIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/TravelSummary/get-travelform/{req_travel_id}`.replace(`{${"req_travel_id"}}`, encodeURIComponent(String(requestParameters['reqTravelId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTravelSummaryGetTravelformReqTravelIdGet(requestParameters: ApiTravelSummaryGetTravelformReqTravelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTravelSummaryGetTravelformReqTravelIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTravelSummaryReceiveTravelSummaryFromSAMG2PostRaw(requestParameters: ApiTravelSummaryReceiveTravelSummaryFromSAMG2PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/TravelSummary/receive-travel-summary-from-SAMG2`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body']!.map(TravelSummaryReceiveModelToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringBaseResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiTravelSummaryReceiveTravelSummaryFromSAMG2Post(requestParameters: ApiTravelSummaryReceiveTravelSummaryFromSAMG2PostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringBaseResponseModel> {
        const response = await this.apiTravelSummaryReceiveTravelSummaryFromSAMG2PostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTravelSummaryUpdateTravelSummaryDetailPostRaw(requestParameters: ApiTravelSummaryUpdateTravelSummaryDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/TravelSummary/update-travel-summary-detail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemarkModelToJSON(requestParameters['body']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiTravelSummaryUpdateTravelSummaryDetailPost(requestParameters: ApiTravelSummaryUpdateTravelSummaryDetailPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.apiTravelSummaryUpdateTravelSummaryDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
