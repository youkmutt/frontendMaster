/* tslint:disable */
/* eslint-disable */
/**
 * BaseWebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CancelImportModel,
  ImportStatementDetailModelBaseResponseModel,
  ImportStatementResponseModel,
  LogImportStatementModel,
  LogImportStatementResponseModel,
  NotFoundMappingDetailModelBaseResponseModel,
  NotFoundMappingResponseModel,
  VoucherMappingStatementModel,
} from '../models/index';
import {
    CancelImportModelFromJSON,
    CancelImportModelToJSON,
    ImportStatementDetailModelBaseResponseModelFromJSON,
    ImportStatementDetailModelBaseResponseModelToJSON,
    ImportStatementResponseModelFromJSON,
    ImportStatementResponseModelToJSON,
    LogImportStatementModelFromJSON,
    LogImportStatementModelToJSON,
    LogImportStatementResponseModelFromJSON,
    LogImportStatementResponseModelToJSON,
    NotFoundMappingDetailModelBaseResponseModelFromJSON,
    NotFoundMappingDetailModelBaseResponseModelToJSON,
    NotFoundMappingResponseModelFromJSON,
    NotFoundMappingResponseModelToJSON,
    VoucherMappingStatementModelFromJSON,
    VoucherMappingStatementModelToJSON,
} from '../models/index';

export interface ApiBankReconcileCancelPostRequest {
    body?: CancelImportModel;
}

export interface ApiBankReconcileCreateMappingListPostRequest {
    body?: Array<VoucherMappingStatementModel>;
}

export interface ApiBankReconcileDetailIdGetRequest {
    id: number;
}

export interface ApiBankReconcileInactiveNotfoundStatementPostRequest {
    id?: number;
}

export interface ApiBankReconcileInactiveNotfoundVoucherPostRequest {
    id?: number;
}

export interface ApiBankReconcileListGetRequest {
    startCreateDate?: Date;
    endCreateDate?: Date;
    accountId?: number;
    fileName?: string;
    dateStart?: any;
    dateEnd?: any;
    fromMoneyCumulative?: number;
    toMoneyCumulative?: number;
    impId?: number;
    activeFlag?: boolean;
    startCancelDate?: Date;
    endCancelDate?: Date;
    stmtDatetimeStart?: Date;
    stmtDatetimeEnd?: Date;
    canceller?: string;
    voucherNo?: string;
    descripttion?: string;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiBankReconcileListStatementGetRequest {
    startCreateDate?: Date;
    endCreateDate?: Date;
    accountId?: number;
    fileName?: string;
    dateStart?: any;
    dateEnd?: any;
    fromMoneyCumulative?: number;
    toMoneyCumulative?: number;
    impId?: number;
    activeFlag?: boolean;
    startCancelDate?: Date;
    endCancelDate?: Date;
    stmtDatetimeStart?: Date;
    stmtDatetimeEnd?: Date;
    canceller?: string;
    voucherNo?: string;
    descripttion?: string;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiBankReconcileLogCreatePostRequest {
    uuid?: string;
    body?: LogImportStatementModel;
}

export interface ApiBankReconcileNotfoundStatementDetailIdGetRequest {
    id: number;
}

export interface ApiBankReconcileNotfoundStatementListGetRequest {
    startCreateDate?: Date;
    endCreateDate?: Date;
    accountId?: number;
    fileName?: string;
    dateStart?: any;
    dateEnd?: any;
    fromMoneyCumulative?: number;
    toMoneyCumulative?: number;
    impId?: number;
    activeFlag?: boolean;
    startCancelDate?: Date;
    endCancelDate?: Date;
    stmtDatetimeStart?: Date;
    stmtDatetimeEnd?: Date;
    canceller?: string;
    voucherNo?: string;
    descripttion?: string;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiBankReconcileNotfoundVoucherDetailIdGetRequest {
    id: number;
}

export interface ApiBankReconcileNotfoundVoucherListGetRequest {
    startCreateDate?: Date;
    endCreateDate?: Date;
    accountId?: number;
    fileName?: string;
    dateStart?: any;
    dateEnd?: any;
    fromMoneyCumulative?: number;
    toMoneyCumulative?: number;
    impId?: number;
    activeFlag?: boolean;
    startCancelDate?: Date;
    endCancelDate?: Date;
    stmtDatetimeStart?: Date;
    stmtDatetimeEnd?: Date;
    canceller?: string;
    voucherNo?: string;
    descripttion?: string;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiBankReconcileUploadPostRequest {
    accountID?: number;
    file?: Blob;
}

/**
 * 
 */
export class BankReconcileApi extends runtime.BaseAPI {

    /**
     */
    async apiBankReconcileCancelPostRaw(requestParameters: ApiBankReconcileCancelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelImportModelToJSON(requestParameters['body']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiBankReconcileCancelPost(requestParameters: ApiBankReconcileCancelPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.apiBankReconcileCancelPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileCreateMappingListPostRaw(requestParameters: ApiBankReconcileCreateMappingListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/create-mapping-list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body']!.map(VoucherMappingStatementModelToJSON),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiBankReconcileCreateMappingListPost(requestParameters: ApiBankReconcileCreateMappingListPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.apiBankReconcileCreateMappingListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileDetailIdGetRaw(requestParameters: ApiBankReconcileDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportStatementDetailModelBaseResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBankReconcileDetailIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/Detail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportStatementDetailModelBaseResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiBankReconcileDetailIdGet(requestParameters: ApiBankReconcileDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportStatementDetailModelBaseResponseModel> {
        const response = await this.apiBankReconcileDetailIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileInactiveNotfoundStatementPostRaw(requestParameters: ApiBankReconcileInactiveNotfoundStatementPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/inactive-notfound-statement`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiBankReconcileInactiveNotfoundStatementPost(requestParameters: ApiBankReconcileInactiveNotfoundStatementPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.apiBankReconcileInactiveNotfoundStatementPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileInactiveNotfoundVoucherPostRaw(requestParameters: ApiBankReconcileInactiveNotfoundVoucherPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/inactive-notfound-voucher`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiBankReconcileInactiveNotfoundVoucherPost(requestParameters: ApiBankReconcileInactiveNotfoundVoucherPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.apiBankReconcileInactiveNotfoundVoucherPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileListGetRaw(requestParameters: ApiBankReconcileListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogImportStatementResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['startCreateDate'] != null) {
            queryParameters['start_create_date'] = (requestParameters['startCreateDate'] as any).toISOString();
        }

        if (requestParameters['endCreateDate'] != null) {
            queryParameters['end_create_date'] = (requestParameters['endCreateDate'] as any).toISOString();
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        if (requestParameters['dateStart'] != null) {
            queryParameters['date_start'] = requestParameters['dateStart'];
        }

        if (requestParameters['dateEnd'] != null) {
            queryParameters['date_end'] = requestParameters['dateEnd'];
        }

        if (requestParameters['fromMoneyCumulative'] != null) {
            queryParameters['from_money_cumulative'] = requestParameters['fromMoneyCumulative'];
        }

        if (requestParameters['toMoneyCumulative'] != null) {
            queryParameters['to_money_cumulative'] = requestParameters['toMoneyCumulative'];
        }

        if (requestParameters['impId'] != null) {
            queryParameters['imp_id'] = requestParameters['impId'];
        }

        if (requestParameters['activeFlag'] != null) {
            queryParameters['active_flag'] = requestParameters['activeFlag'];
        }

        if (requestParameters['startCancelDate'] != null) {
            queryParameters['start_cancel_date'] = (requestParameters['startCancelDate'] as any).toISOString();
        }

        if (requestParameters['endCancelDate'] != null) {
            queryParameters['end_cancel_date'] = (requestParameters['endCancelDate'] as any).toISOString();
        }

        if (requestParameters['stmtDatetimeStart'] != null) {
            queryParameters['stmt_datetime_start'] = (requestParameters['stmtDatetimeStart'] as any).toISOString();
        }

        if (requestParameters['stmtDatetimeEnd'] != null) {
            queryParameters['stmt_datetime_end'] = (requestParameters['stmtDatetimeEnd'] as any).toISOString();
        }

        if (requestParameters['canceller'] != null) {
            queryParameters['canceller'] = requestParameters['canceller'];
        }

        if (requestParameters['voucherNo'] != null) {
            queryParameters['voucher_no'] = requestParameters['voucherNo'];
        }

        if (requestParameters['descripttion'] != null) {
            queryParameters['descripttion'] = requestParameters['descripttion'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogImportStatementResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiBankReconcileListGet(requestParameters: ApiBankReconcileListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogImportStatementResponseModel> {
        const response = await this.apiBankReconcileListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileListStatementGetRaw(requestParameters: ApiBankReconcileListStatementGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportStatementResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['startCreateDate'] != null) {
            queryParameters['start_create_date'] = (requestParameters['startCreateDate'] as any).toISOString();
        }

        if (requestParameters['endCreateDate'] != null) {
            queryParameters['end_create_date'] = (requestParameters['endCreateDate'] as any).toISOString();
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        if (requestParameters['dateStart'] != null) {
            queryParameters['date_start'] = requestParameters['dateStart'];
        }

        if (requestParameters['dateEnd'] != null) {
            queryParameters['date_end'] = requestParameters['dateEnd'];
        }

        if (requestParameters['fromMoneyCumulative'] != null) {
            queryParameters['from_money_cumulative'] = requestParameters['fromMoneyCumulative'];
        }

        if (requestParameters['toMoneyCumulative'] != null) {
            queryParameters['to_money_cumulative'] = requestParameters['toMoneyCumulative'];
        }

        if (requestParameters['impId'] != null) {
            queryParameters['imp_id'] = requestParameters['impId'];
        }

        if (requestParameters['activeFlag'] != null) {
            queryParameters['active_flag'] = requestParameters['activeFlag'];
        }

        if (requestParameters['startCancelDate'] != null) {
            queryParameters['start_cancel_date'] = (requestParameters['startCancelDate'] as any).toISOString();
        }

        if (requestParameters['endCancelDate'] != null) {
            queryParameters['end_cancel_date'] = (requestParameters['endCancelDate'] as any).toISOString();
        }

        if (requestParameters['stmtDatetimeStart'] != null) {
            queryParameters['stmt_datetime_start'] = (requestParameters['stmtDatetimeStart'] as any).toISOString();
        }

        if (requestParameters['stmtDatetimeEnd'] != null) {
            queryParameters['stmt_datetime_end'] = (requestParameters['stmtDatetimeEnd'] as any).toISOString();
        }

        if (requestParameters['canceller'] != null) {
            queryParameters['canceller'] = requestParameters['canceller'];
        }

        if (requestParameters['voucherNo'] != null) {
            queryParameters['voucher_no'] = requestParameters['voucherNo'];
        }

        if (requestParameters['descripttion'] != null) {
            queryParameters['descripttion'] = requestParameters['descripttion'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/list-statement`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportStatementResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiBankReconcileListStatementGet(requestParameters: ApiBankReconcileListStatementGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportStatementResponseModel> {
        const response = await this.apiBankReconcileListStatementGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileLogCreatePostRaw(requestParameters: ApiBankReconcileLogCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/log-create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LogImportStatementModelToJSON(requestParameters['body']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiBankReconcileLogCreatePost(requestParameters: ApiBankReconcileLogCreatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.apiBankReconcileLogCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileNotfoundStatementDetailIdGetRaw(requestParameters: ApiBankReconcileNotfoundStatementDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotFoundMappingDetailModelBaseResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBankReconcileNotfoundStatementDetailIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/notfound-statement-detail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotFoundMappingDetailModelBaseResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiBankReconcileNotfoundStatementDetailIdGet(requestParameters: ApiBankReconcileNotfoundStatementDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotFoundMappingDetailModelBaseResponseModel> {
        const response = await this.apiBankReconcileNotfoundStatementDetailIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileNotfoundStatementListGetRaw(requestParameters: ApiBankReconcileNotfoundStatementListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotFoundMappingResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['startCreateDate'] != null) {
            queryParameters['start_create_date'] = (requestParameters['startCreateDate'] as any).toISOString();
        }

        if (requestParameters['endCreateDate'] != null) {
            queryParameters['end_create_date'] = (requestParameters['endCreateDate'] as any).toISOString();
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        if (requestParameters['dateStart'] != null) {
            queryParameters['date_start'] = requestParameters['dateStart'];
        }

        if (requestParameters['dateEnd'] != null) {
            queryParameters['date_end'] = requestParameters['dateEnd'];
        }

        if (requestParameters['fromMoneyCumulative'] != null) {
            queryParameters['from_money_cumulative'] = requestParameters['fromMoneyCumulative'];
        }

        if (requestParameters['toMoneyCumulative'] != null) {
            queryParameters['to_money_cumulative'] = requestParameters['toMoneyCumulative'];
        }

        if (requestParameters['impId'] != null) {
            queryParameters['imp_id'] = requestParameters['impId'];
        }

        if (requestParameters['activeFlag'] != null) {
            queryParameters['active_flag'] = requestParameters['activeFlag'];
        }

        if (requestParameters['startCancelDate'] != null) {
            queryParameters['start_cancel_date'] = (requestParameters['startCancelDate'] as any).toISOString();
        }

        if (requestParameters['endCancelDate'] != null) {
            queryParameters['end_cancel_date'] = (requestParameters['endCancelDate'] as any).toISOString();
        }

        if (requestParameters['stmtDatetimeStart'] != null) {
            queryParameters['stmt_datetime_start'] = (requestParameters['stmtDatetimeStart'] as any).toISOString();
        }

        if (requestParameters['stmtDatetimeEnd'] != null) {
            queryParameters['stmt_datetime_end'] = (requestParameters['stmtDatetimeEnd'] as any).toISOString();
        }

        if (requestParameters['canceller'] != null) {
            queryParameters['canceller'] = requestParameters['canceller'];
        }

        if (requestParameters['voucherNo'] != null) {
            queryParameters['voucher_no'] = requestParameters['voucherNo'];
        }

        if (requestParameters['descripttion'] != null) {
            queryParameters['descripttion'] = requestParameters['descripttion'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/notfound-statement-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotFoundMappingResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiBankReconcileNotfoundStatementListGet(requestParameters: ApiBankReconcileNotfoundStatementListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotFoundMappingResponseModel> {
        const response = await this.apiBankReconcileNotfoundStatementListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileNotfoundVoucherDetailIdGetRaw(requestParameters: ApiBankReconcileNotfoundVoucherDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotFoundMappingDetailModelBaseResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBankReconcileNotfoundVoucherDetailIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/notfound-voucher-detail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotFoundMappingDetailModelBaseResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiBankReconcileNotfoundVoucherDetailIdGet(requestParameters: ApiBankReconcileNotfoundVoucherDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotFoundMappingDetailModelBaseResponseModel> {
        const response = await this.apiBankReconcileNotfoundVoucherDetailIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileNotfoundVoucherListGetRaw(requestParameters: ApiBankReconcileNotfoundVoucherListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotFoundMappingResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['startCreateDate'] != null) {
            queryParameters['start_create_date'] = (requestParameters['startCreateDate'] as any).toISOString();
        }

        if (requestParameters['endCreateDate'] != null) {
            queryParameters['end_create_date'] = (requestParameters['endCreateDate'] as any).toISOString();
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        if (requestParameters['dateStart'] != null) {
            queryParameters['date_start'] = requestParameters['dateStart'];
        }

        if (requestParameters['dateEnd'] != null) {
            queryParameters['date_end'] = requestParameters['dateEnd'];
        }

        if (requestParameters['fromMoneyCumulative'] != null) {
            queryParameters['from_money_cumulative'] = requestParameters['fromMoneyCumulative'];
        }

        if (requestParameters['toMoneyCumulative'] != null) {
            queryParameters['to_money_cumulative'] = requestParameters['toMoneyCumulative'];
        }

        if (requestParameters['impId'] != null) {
            queryParameters['imp_id'] = requestParameters['impId'];
        }

        if (requestParameters['activeFlag'] != null) {
            queryParameters['active_flag'] = requestParameters['activeFlag'];
        }

        if (requestParameters['startCancelDate'] != null) {
            queryParameters['start_cancel_date'] = (requestParameters['startCancelDate'] as any).toISOString();
        }

        if (requestParameters['endCancelDate'] != null) {
            queryParameters['end_cancel_date'] = (requestParameters['endCancelDate'] as any).toISOString();
        }

        if (requestParameters['stmtDatetimeStart'] != null) {
            queryParameters['stmt_datetime_start'] = (requestParameters['stmtDatetimeStart'] as any).toISOString();
        }

        if (requestParameters['stmtDatetimeEnd'] != null) {
            queryParameters['stmt_datetime_end'] = (requestParameters['stmtDatetimeEnd'] as any).toISOString();
        }

        if (requestParameters['canceller'] != null) {
            queryParameters['canceller'] = requestParameters['canceller'];
        }

        if (requestParameters['voucherNo'] != null) {
            queryParameters['voucher_no'] = requestParameters['voucherNo'];
        }

        if (requestParameters['descripttion'] != null) {
            queryParameters['descripttion'] = requestParameters['descripttion'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BankReconcile/notfound-voucher-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotFoundMappingResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiBankReconcileNotfoundVoucherListGet(requestParameters: ApiBankReconcileNotfoundVoucherListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotFoundMappingResponseModel> {
        const response = await this.apiBankReconcileNotfoundVoucherListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBankReconcileUploadPostRaw(requestParameters: ApiBankReconcileUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportStatementResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['accountID'] != null) {
            queryParameters['accountID'] = requestParameters['accountID'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/BankReconcile/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportStatementResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiBankReconcileUploadPost(requestParameters: ApiBankReconcileUploadPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportStatementResponseModel> {
        const response = await this.apiBankReconcileUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
