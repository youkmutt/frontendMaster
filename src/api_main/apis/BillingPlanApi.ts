/* tslint:disable */
/* eslint-disable */
/**
 * BaseWebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BillingPlanGetSearchModelBaseResponsePagination,
  BillingPlanModelBaseResponseModel,
  BillingPlanPatchModel,
  BillingPlanPatchModelBaseResponseModel,
} from '../models/index';

export interface ApiBillingPlanGetBillingPlanByIdBillingPlanIdGetRequest {
    billingPlanId: number;
}

export interface ApiBillingPlanGetBillingPlanListGetRequest {
    customerName?: string;
    invoiceNo?: string;
    planDateStart?: string;
    planDateEnd?: string;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiBillingPlanUpdateBillingPlanPatchRequest {
    body?: BillingPlanPatchModel;
}

/**
 * BillingPlanApi - interface
 * 
 * @export
 * @interface BillingPlanApiInterface
 */
export interface BillingPlanApiInterface {
    /**
     * 
     * @param {number} billingPlanId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingPlanApiInterface
     */
    apiBillingPlanGetBillingPlanByIdBillingPlanIdGetRaw(requestParameters: ApiBillingPlanGetBillingPlanByIdBillingPlanIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingPlanModelBaseResponseModel>>;

    /**
     */
    apiBillingPlanGetBillingPlanByIdBillingPlanIdGet(requestParameters: ApiBillingPlanGetBillingPlanByIdBillingPlanIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingPlanModelBaseResponseModel>;

    /**
     * 
     * @param {string} [customerName] 
     * @param {string} [invoiceNo] 
     * @param {string} [planDateStart] 
     * @param {string} [planDateEnd] 
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingPlanApiInterface
     */
    apiBillingPlanGetBillingPlanListGetRaw(requestParameters: ApiBillingPlanGetBillingPlanListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingPlanGetSearchModelBaseResponsePagination>>;

    /**
     */
    apiBillingPlanGetBillingPlanListGet(requestParameters: ApiBillingPlanGetBillingPlanListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingPlanGetSearchModelBaseResponsePagination>;

    /**
     * 
     * @param {BillingPlanPatchModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingPlanApiInterface
     */
    apiBillingPlanUpdateBillingPlanPatchRaw(requestParameters: ApiBillingPlanUpdateBillingPlanPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingPlanPatchModelBaseResponseModel>>;

    /**
     */
    apiBillingPlanUpdateBillingPlanPatch(requestParameters: ApiBillingPlanUpdateBillingPlanPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingPlanPatchModelBaseResponseModel>;

}

/**
 * 
 */
export class BillingPlanApi extends runtime.BaseAPI implements BillingPlanApiInterface {

    /**
     */
    async apiBillingPlanGetBillingPlanByIdBillingPlanIdGetRaw(requestParameters: ApiBillingPlanGetBillingPlanByIdBillingPlanIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingPlanModelBaseResponseModel>> {
        if (requestParameters['billingPlanId'] == null) {
            throw new runtime.RequiredError(
                'billingPlanId',
                'Required parameter "billingPlanId" was null or undefined when calling apiBillingPlanGetBillingPlanByIdBillingPlanIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BillingPlan/get-billing-plan-by-id/{billingPlanId}`.replace(`{${"billingPlanId"}}`, encodeURIComponent(String(requestParameters['billingPlanId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiBillingPlanGetBillingPlanByIdBillingPlanIdGet(requestParameters: ApiBillingPlanGetBillingPlanByIdBillingPlanIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingPlanModelBaseResponseModel> {
        const response = await this.apiBillingPlanGetBillingPlanByIdBillingPlanIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBillingPlanGetBillingPlanListGetRaw(requestParameters: ApiBillingPlanGetBillingPlanListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingPlanGetSearchModelBaseResponsePagination>> {
        const queryParameters: any = {};

        if (requestParameters['customerName'] != null) {
            queryParameters['customer_name'] = requestParameters['customerName'];
        }

        if (requestParameters['invoiceNo'] != null) {
            queryParameters['invoice_no'] = requestParameters['invoiceNo'];
        }

        if (requestParameters['planDateStart'] != null) {
            queryParameters['plan_date_start'] = requestParameters['planDateStart'];
        }

        if (requestParameters['planDateEnd'] != null) {
            queryParameters['plan_date_end'] = requestParameters['planDateEnd'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BillingPlan/get-billing-plan-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiBillingPlanGetBillingPlanListGet(requestParameters: ApiBillingPlanGetBillingPlanListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingPlanGetSearchModelBaseResponsePagination> {
        const response = await this.apiBillingPlanGetBillingPlanListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBillingPlanUpdateBillingPlanPatchRaw(requestParameters: ApiBillingPlanUpdateBillingPlanPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingPlanPatchModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/BillingPlan/update-billing-plan`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiBillingPlanUpdateBillingPlanPatch(requestParameters: ApiBillingPlanUpdateBillingPlanPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingPlanPatchModelBaseResponseModel> {
        const response = await this.apiBillingPlanUpdateBillingPlanPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
