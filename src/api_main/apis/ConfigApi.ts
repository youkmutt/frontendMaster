/* tslint:disable */
/* eslint-disable */
/**
 * BaseWebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfigDetailModel,
  ConfigDetailModelBaseResponseModel,
  ConfigModelBaseResponsePagination,
} from '../models/index';

export interface ApiConfigDetailIdGetRequest {
    id: number;
}

export interface ApiConfigDetailbykeyKeyGetRequest {
    key: string;
}

export interface ApiConfigListGetRequest {
    configType?: string;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiConfigUpdatePostRequest {
    body?: ConfigDetailModel;
}

/**
 * ConfigApi - interface
 * 
 * @export
 * @interface ConfigApiInterface
 */
export interface ConfigApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    apiConfigDetailIdGetRaw(requestParameters: ApiConfigDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigDetailModelBaseResponseModel>>;

    /**
     */
    apiConfigDetailIdGet(requestParameters: ApiConfigDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigDetailModelBaseResponseModel>;

    /**
     * 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    apiConfigDetailbykeyKeyGetRaw(requestParameters: ApiConfigDetailbykeyKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigDetailModelBaseResponseModel>>;

    /**
     */
    apiConfigDetailbykeyKeyGet(requestParameters: ApiConfigDetailbykeyKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigDetailModelBaseResponseModel>;

    /**
     * 
     * @param {string} [configType] 
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    apiConfigListGetRaw(requestParameters: ApiConfigListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigModelBaseResponsePagination>>;

    /**
     */
    apiConfigListGet(requestParameters: ApiConfigListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigModelBaseResponsePagination>;

    /**
     * 
     * @param {ConfigDetailModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    apiConfigUpdatePostRaw(requestParameters: ApiConfigUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigDetailModelBaseResponseModel>>;

    /**
     */
    apiConfigUpdatePost(requestParameters: ApiConfigUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigDetailModelBaseResponseModel>;

}

/**
 * 
 */
export class ConfigApi extends runtime.BaseAPI implements ConfigApiInterface {

    /**
     */
    async apiConfigDetailIdGetRaw(requestParameters: ApiConfigDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigDetailModelBaseResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiConfigDetailIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Config/detail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiConfigDetailIdGet(requestParameters: ApiConfigDetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigDetailModelBaseResponseModel> {
        const response = await this.apiConfigDetailIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiConfigDetailbykeyKeyGetRaw(requestParameters: ApiConfigDetailbykeyKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigDetailModelBaseResponseModel>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling apiConfigDetailbykeyKeyGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Config/detailbykey/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiConfigDetailbykeyKeyGet(requestParameters: ApiConfigDetailbykeyKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigDetailModelBaseResponseModel> {
        const response = await this.apiConfigDetailbykeyKeyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiConfigListGetRaw(requestParameters: ApiConfigListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigModelBaseResponsePagination>> {
        const queryParameters: any = {};

        if (requestParameters['configType'] != null) {
            queryParameters['config_type'] = requestParameters['configType'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Config/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiConfigListGet(requestParameters: ApiConfigListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigModelBaseResponsePagination> {
        const response = await this.apiConfigListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiConfigUpdatePostRaw(requestParameters: ApiConfigUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigDetailModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Config/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiConfigUpdatePost(requestParameters: ApiConfigUpdatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigDetailModelBaseResponseModel> {
        const response = await this.apiConfigUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
