/* tslint:disable */
/* eslint-disable */
/**
 * BaseWebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MenuResponseModelListBaseResponseModel,
  PermissionResponseModelListBaseResponseModel,
  RolePermissionRequestModel,
  StringBaseResponseModel,
} from '../models/index';
import {
    MenuResponseModelListBaseResponseModelFromJSON,
    MenuResponseModelListBaseResponseModelToJSON,
    PermissionResponseModelListBaseResponseModelFromJSON,
    PermissionResponseModelListBaseResponseModelToJSON,
    RolePermissionRequestModelFromJSON,
    RolePermissionRequestModelToJSON,
    StringBaseResponseModelFromJSON,
    StringBaseResponseModelToJSON,
} from '../models/index';

export interface ApiRolePermissionMenuAllRoleIDGetRequest {
    roleID: number;
}

export interface ApiRolePermissionPermissionAllRoleIDGetRequest {
    roleID: number;
}

export interface ApiRolePermissionUpdatePermissionPostRequest {
    body?: RolePermissionRequestModel;
}

/**
 * 
 */
export class RolePermissionApi extends runtime.BaseAPI {

    /**
     */
    async apiRolePermissionMenuAllRoleIDGetRaw(requestParameters: ApiRolePermissionMenuAllRoleIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MenuResponseModelListBaseResponseModel>> {
        if (requestParameters['roleID'] == null) {
            throw new runtime.RequiredError(
                'roleID',
                'Required parameter "roleID" was null or undefined when calling apiRolePermissionMenuAllRoleIDGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/RolePermission/menu-all/{roleID}`.replace(`{${"roleID"}}`, encodeURIComponent(String(requestParameters['roleID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MenuResponseModelListBaseResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiRolePermissionMenuAllRoleIDGet(requestParameters: ApiRolePermissionMenuAllRoleIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MenuResponseModelListBaseResponseModel> {
        const response = await this.apiRolePermissionMenuAllRoleIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRolePermissionPermissionAllRoleIDGetRaw(requestParameters: ApiRolePermissionPermissionAllRoleIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionResponseModelListBaseResponseModel>> {
        if (requestParameters['roleID'] == null) {
            throw new runtime.RequiredError(
                'roleID',
                'Required parameter "roleID" was null or undefined when calling apiRolePermissionPermissionAllRoleIDGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/RolePermission/permission-all/{roleID}`.replace(`{${"roleID"}}`, encodeURIComponent(String(requestParameters['roleID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionResponseModelListBaseResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiRolePermissionPermissionAllRoleIDGet(requestParameters: ApiRolePermissionPermissionAllRoleIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionResponseModelListBaseResponseModel> {
        const response = await this.apiRolePermissionPermissionAllRoleIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRolePermissionUpdatePermissionPostRaw(requestParameters: ApiRolePermissionUpdatePermissionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/RolePermission/update-permission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RolePermissionRequestModelToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringBaseResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiRolePermissionUpdatePermissionPost(requestParameters: ApiRolePermissionUpdatePermissionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringBaseResponseModel> {
        const response = await this.apiRolePermissionUpdatePermissionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
