/* tslint:disable */
/* eslint-disable */
/**
 * BaseWebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NotiStepIdModelBaseResponseModel,
  WorkflowStepStatusModelListBaseResponseModel,
  WorkflowTransitionInfoModelListBaseResponseModel,
  WorkflowTransitionRequest,
  WorkflowTransitionResultBaseResponseModel,
} from '../models/index';

export interface ApiWorkflowStepStatusGetRequest {
    workflowId?: number;
}

export interface ApiWorkflowTransitionGetRequest {
    workflowId?: number;
    currentStepId?: number;
}

export interface ApiWorkflowTransitionPostRequest {
    body?: WorkflowTransitionRequest;
}

/**
 * WorkflowApi - interface
 * 
 * @export
 * @interface WorkflowApiInterface
 */
export interface WorkflowApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApiInterface
     */
    apiWorkflowGetApprovalNotiGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotiStepIdModelBaseResponseModel>>;

    /**
     */
    apiWorkflowGetApprovalNotiGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotiStepIdModelBaseResponseModel>;

    /**
     * 
     * @param {number} [workflowId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApiInterface
     */
    apiWorkflowStepStatusGetRaw(requestParameters: ApiWorkflowStepStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowStepStatusModelListBaseResponseModel>>;

    /**
     */
    apiWorkflowStepStatusGet(requestParameters: ApiWorkflowStepStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowStepStatusModelListBaseResponseModel>;

    /**
     * 
     * @param {number} [workflowId] 
     * @param {number} [currentStepId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApiInterface
     */
    apiWorkflowTransitionGetRaw(requestParameters: ApiWorkflowTransitionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTransitionInfoModelListBaseResponseModel>>;

    /**
     */
    apiWorkflowTransitionGet(requestParameters: ApiWorkflowTransitionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTransitionInfoModelListBaseResponseModel>;

    /**
     * 
     * @param {WorkflowTransitionRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApiInterface
     */
    apiWorkflowTransitionPostRaw(requestParameters: ApiWorkflowTransitionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTransitionResultBaseResponseModel>>;

    /**
     */
    apiWorkflowTransitionPost(requestParameters: ApiWorkflowTransitionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTransitionResultBaseResponseModel>;

}

/**
 * 
 */
export class WorkflowApi extends runtime.BaseAPI implements WorkflowApiInterface {

    /**
     */
    async apiWorkflowGetApprovalNotiGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotiStepIdModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Workflow/getApprovalNoti`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiWorkflowGetApprovalNotiGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotiStepIdModelBaseResponseModel> {
        const response = await this.apiWorkflowGetApprovalNotiGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWorkflowStepStatusGetRaw(requestParameters: ApiWorkflowStepStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowStepStatusModelListBaseResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['workflowId'] != null) {
            queryParameters['workflowId'] = requestParameters['workflowId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Workflow/step-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiWorkflowStepStatusGet(requestParameters: ApiWorkflowStepStatusGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowStepStatusModelListBaseResponseModel> {
        const response = await this.apiWorkflowStepStatusGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWorkflowTransitionGetRaw(requestParameters: ApiWorkflowTransitionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTransitionInfoModelListBaseResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['workflowId'] != null) {
            queryParameters['workflowId'] = requestParameters['workflowId'];
        }

        if (requestParameters['currentStepId'] != null) {
            queryParameters['currentStepId'] = requestParameters['currentStepId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Workflow/transition`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiWorkflowTransitionGet(requestParameters: ApiWorkflowTransitionGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTransitionInfoModelListBaseResponseModel> {
        const response = await this.apiWorkflowTransitionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWorkflowTransitionPostRaw(requestParameters: ApiWorkflowTransitionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTransitionResultBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Workflow/transition`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiWorkflowTransitionPost(requestParameters: ApiWorkflowTransitionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTransitionResultBaseResponseModel> {
        const response = await this.apiWorkflowTransitionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
