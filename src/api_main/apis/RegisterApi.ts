/* tslint:disable */
/* eslint-disable */
/**
 * BaseWebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanBaseResponseModel,
  RegisterCustomerGetSearchModelBaseResponsePagination,
  RegisterCustomerUpdateModel,
  RegisterCustomerUpdateModelBaseResponseModel,
  UpdateAmountRegistterCustomerModel,
  UpdateAmountRegistterCustomerModelBaseResponseModel,
} from '../models/index';

export interface ApiRegisterAddRegisterPostRequest {
    body?: Omit<RegisterCustomerUpdateModel, 'customer_type_name'|'customer_credit_type_name'|'regis_status_name'>;
}

export interface ApiRegisterDeleteRegisterPatchRequest {
    regisId?: number;
}

export interface ApiRegisterGetRegisterByIdRegisIdGetRequest {
    regisId: number;
}

export interface ApiRegisterGetRegisterListGetRequest {
    customerName?: string;
    customerCreditType?: any;
    salesOwner?: string;
    regisStatus?: any;
    regisStartDate?: string;
    regisEndDate?: string;
    isApprove?: boolean;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiRegisterUpdateRegisterAmountPatchRequest {
    body?: UpdateAmountRegistterCustomerModel;
}

export interface ApiRegisterUpdateRegisterPutRequest {
    body?: Omit<RegisterCustomerUpdateModel, 'customer_type_name'|'customer_credit_type_name'|'regis_status_name'>;
}

/**
 * RegisterApi - interface
 * 
 * @export
 * @interface RegisterApiInterface
 */
export interface RegisterApiInterface {
    /**
     * 
     * @param {RegisterCustomerUpdateModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApiInterface
     */
    apiRegisterAddRegisterPostRaw(requestParameters: ApiRegisterAddRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCustomerUpdateModelBaseResponseModel>>;

    /**
     */
    apiRegisterAddRegisterPost(requestParameters: ApiRegisterAddRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCustomerUpdateModelBaseResponseModel>;

    /**
     * 
     * @param {number} [regisId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApiInterface
     */
    apiRegisterDeleteRegisterPatchRaw(requestParameters: ApiRegisterDeleteRegisterPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanBaseResponseModel>>;

    /**
     */
    apiRegisterDeleteRegisterPatch(requestParameters: ApiRegisterDeleteRegisterPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanBaseResponseModel>;

    /**
     * 
     * @param {number} regisId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApiInterface
     */
    apiRegisterGetRegisterByIdRegisIdGetRaw(requestParameters: ApiRegisterGetRegisterByIdRegisIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCustomerUpdateModelBaseResponseModel>>;

    /**
     */
    apiRegisterGetRegisterByIdRegisIdGet(requestParameters: ApiRegisterGetRegisterByIdRegisIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCustomerUpdateModelBaseResponseModel>;

    /**
     * 
     * @param {string} [customerName] 
     * @param {any} [customerCreditType] 
     * @param {string} [salesOwner] 
     * @param {any} [regisStatus] 
     * @param {string} [regisStartDate] 
     * @param {string} [regisEndDate] 
     * @param {boolean} [isApprove] 
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApiInterface
     */
    apiRegisterGetRegisterListGetRaw(requestParameters: ApiRegisterGetRegisterListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCustomerGetSearchModelBaseResponsePagination>>;

    /**
     */
    apiRegisterGetRegisterListGet(requestParameters: ApiRegisterGetRegisterListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCustomerGetSearchModelBaseResponsePagination>;

    /**
     * 
     * @param {UpdateAmountRegistterCustomerModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApiInterface
     */
    apiRegisterUpdateRegisterAmountPatchRaw(requestParameters: ApiRegisterUpdateRegisterAmountPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAmountRegistterCustomerModelBaseResponseModel>>;

    /**
     */
    apiRegisterUpdateRegisterAmountPatch(requestParameters: ApiRegisterUpdateRegisterAmountPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAmountRegistterCustomerModelBaseResponseModel>;

    /**
     * 
     * @param {RegisterCustomerUpdateModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApiInterface
     */
    apiRegisterUpdateRegisterPutRaw(requestParameters: ApiRegisterUpdateRegisterPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCustomerUpdateModelBaseResponseModel>>;

    /**
     */
    apiRegisterUpdateRegisterPut(requestParameters: ApiRegisterUpdateRegisterPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCustomerUpdateModelBaseResponseModel>;

}

/**
 * 
 */
export class RegisterApi extends runtime.BaseAPI implements RegisterApiInterface {

    /**
     */
    async apiRegisterAddRegisterPostRaw(requestParameters: ApiRegisterAddRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCustomerUpdateModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Register/add-register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiRegisterAddRegisterPost(requestParameters: ApiRegisterAddRegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCustomerUpdateModelBaseResponseModel> {
        const response = await this.apiRegisterAddRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRegisterDeleteRegisterPatchRaw(requestParameters: ApiRegisterDeleteRegisterPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanBaseResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['regisId'] != null) {
            queryParameters['regisId'] = requestParameters['regisId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Register/delete-register`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiRegisterDeleteRegisterPatch(requestParameters: ApiRegisterDeleteRegisterPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanBaseResponseModel> {
        const response = await this.apiRegisterDeleteRegisterPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRegisterGetRegisterByIdRegisIdGetRaw(requestParameters: ApiRegisterGetRegisterByIdRegisIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCustomerUpdateModelBaseResponseModel>> {
        if (requestParameters['regisId'] == null) {
            throw new runtime.RequiredError(
                'regisId',
                'Required parameter "regisId" was null or undefined when calling apiRegisterGetRegisterByIdRegisIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Register/get-register-by-id/{regisId}`.replace(`{${"regisId"}}`, encodeURIComponent(String(requestParameters['regisId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiRegisterGetRegisterByIdRegisIdGet(requestParameters: ApiRegisterGetRegisterByIdRegisIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCustomerUpdateModelBaseResponseModel> {
        const response = await this.apiRegisterGetRegisterByIdRegisIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRegisterGetRegisterListGetRaw(requestParameters: ApiRegisterGetRegisterListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCustomerGetSearchModelBaseResponsePagination>> {
        const queryParameters: any = {};

        if (requestParameters['customerName'] != null) {
            queryParameters['customer_name'] = requestParameters['customerName'];
        }

        if (requestParameters['customerCreditType'] != null) {
            queryParameters['customer_credit_type'] = requestParameters['customerCreditType'];
        }

        if (requestParameters['salesOwner'] != null) {
            queryParameters['sales_owner'] = requestParameters['salesOwner'];
        }

        if (requestParameters['regisStatus'] != null) {
            queryParameters['regis_status'] = requestParameters['regisStatus'];
        }

        if (requestParameters['regisStartDate'] != null) {
            queryParameters['regis_start_date'] = requestParameters['regisStartDate'];
        }

        if (requestParameters['regisEndDate'] != null) {
            queryParameters['regis_end_date'] = requestParameters['regisEndDate'];
        }

        if (requestParameters['isApprove'] != null) {
            queryParameters['is_approve'] = requestParameters['isApprove'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Register/get-register-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiRegisterGetRegisterListGet(requestParameters: ApiRegisterGetRegisterListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCustomerGetSearchModelBaseResponsePagination> {
        const response = await this.apiRegisterGetRegisterListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRegisterUpdateRegisterAmountPatchRaw(requestParameters: ApiRegisterUpdateRegisterAmountPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAmountRegistterCustomerModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Register/update-register-amount`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiRegisterUpdateRegisterAmountPatch(requestParameters: ApiRegisterUpdateRegisterAmountPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAmountRegistterCustomerModelBaseResponseModel> {
        const response = await this.apiRegisterUpdateRegisterAmountPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRegisterUpdateRegisterPutRaw(requestParameters: ApiRegisterUpdateRegisterPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCustomerUpdateModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/Register/update-register`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiRegisterUpdateRegisterPut(requestParameters: ApiRegisterUpdateRegisterPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCustomerUpdateModelBaseResponseModel> {
        const response = await this.apiRegisterUpdateRegisterPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
