/* tslint:disable */
/* eslint-disable */
/**
 * BaseWebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanBaseResponseModel,
  CustomerVerifyTokenResponseModelBaseResponseModel,
  MenuResponseModelListBaseResponseModel,
  RefreshTokenModel,
  SaleLoginRequestModel,
  SaleTokenModel,
  StringBaseResponseModel,
  TokenModelBaseResponseModel,
  UserChangePasswordByEmailModel,
  UserChangePasswordByUserIDModel,
  UserCreateModel,
  UserDetailModelBaseResponseModel,
  UserLoginRequestModel,
  UserModelBaseResponsePagination,
  UserResetPasswordRequest,
  UserUpdateRequestModel,
  UserUpdateRequestModelBaseResponseModel,
} from '../models/index';

export interface ApiUserChangePasswordPostRequest {
    body?: UserChangePasswordByUserIDModel;
}

export interface ApiUserChangePasswordbyemailPostRequest {
    body?: UserChangePasswordByEmailModel;
}

export interface ApiUserCreateTestUserPostRequest {
    body?: UserLoginRequestModel;
}

export interface ApiUserCreateUserPostRequest {
    body?: UserCreateModel;
}

export interface ApiUserCustomerVerifyTokenPostRequest {
    body?: SaleTokenModel;
}

export interface ApiUserDeleteUserIdPatchRequest {
    id: number;
}

export interface ApiUserLoginADPostRequest {
    body?: UserLoginRequestModel;
}

export interface ApiUserRefreshtokenPostRequest {
    body?: RefreshTokenModel;
}

export interface ApiUserRequestResetPasswordPostRequest {
    body?: UserResetPasswordRequest;
}

export interface ApiUserSaleGenerateTokenPostRequest {
    body?: SaleLoginRequestModel;
}

export interface ApiUserSigninPostRequest {
    body?: UserLoginRequestModel;
}

export interface ApiUserSsoCallbackGetRequest {
    token?: string;
    key?: string;
}

export interface ApiUserUpdateUserPatchRequest {
    body?: UserUpdateRequestModel;
}

export interface ApiUserUserAllGetRequest {
    firstname?: string;
    lastname?: string;
    email?: string;
    departmentId?: number;
    empcode?: string;
    username?: string;
    roleId?: number;
    name?: string;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiUserUserIdGetRequest {
    id: number;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserApprovalNotificationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MenuResponseModelListBaseResponseModel>>;

    /**
     */
    apiUserApprovalNotificationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MenuResponseModelListBaseResponseModel>;

    /**
     * 
     * @param {UserChangePasswordByUserIDModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserChangePasswordPostRaw(requestParameters: ApiUserChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringBaseResponseModel>>;

    /**
     */
    apiUserChangePasswordPost(requestParameters: ApiUserChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringBaseResponseModel>;

    /**
     * 
     * @param {UserChangePasswordByEmailModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserChangePasswordbyemailPostRaw(requestParameters: ApiUserChangePasswordbyemailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringBaseResponseModel>>;

    /**
     */
    apiUserChangePasswordbyemailPost(requestParameters: ApiUserChangePasswordbyemailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringBaseResponseModel>;

    /**
     * 
     * @param {UserLoginRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserCreateTestUserPostRaw(requestParameters: ApiUserCreateTestUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailModelBaseResponseModel>>;

    /**
     */
    apiUserCreateTestUserPost(requestParameters: ApiUserCreateTestUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailModelBaseResponseModel>;

    /**
     * 
     * @param {UserCreateModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserCreateUserPostRaw(requestParameters: ApiUserCreateUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanBaseResponseModel>>;

    /**
     */
    apiUserCreateUserPost(requestParameters: ApiUserCreateUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanBaseResponseModel>;

    /**
     * 
     * @param {SaleTokenModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserCustomerVerifyTokenPostRaw(requestParameters: ApiUserCustomerVerifyTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerVerifyTokenResponseModelBaseResponseModel>>;

    /**
     */
    apiUserCustomerVerifyTokenPost(requestParameters: ApiUserCustomerVerifyTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerVerifyTokenResponseModelBaseResponseModel>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserDeleteUserIdPatchRaw(requestParameters: ApiUserDeleteUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanBaseResponseModel>>;

    /**
     */
    apiUserDeleteUserIdPatch(requestParameters: ApiUserDeleteUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanBaseResponseModel>;

    /**
     * 
     * @param {UserLoginRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserLoginADPostRaw(requestParameters: ApiUserLoginADPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailModelBaseResponseModel>>;

    /**
     */
    apiUserLoginADPost(requestParameters: ApiUserLoginADPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailModelBaseResponseModel>;

    /**
     * 
     * @param {RefreshTokenModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserRefreshtokenPostRaw(requestParameters: ApiUserRefreshtokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelBaseResponseModel>>;

    /**
     */
    apiUserRefreshtokenPost(requestParameters: ApiUserRefreshtokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelBaseResponseModel>;

    /**
     * 
     * @param {UserResetPasswordRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserRequestResetPasswordPostRaw(requestParameters: ApiUserRequestResetPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringBaseResponseModel>>;

    /**
     */
    apiUserRequestResetPasswordPost(requestParameters: ApiUserRequestResetPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringBaseResponseModel>;

    /**
     * 
     * @param {SaleLoginRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserSaleGenerateTokenPostRaw(requestParameters: ApiUserSaleGenerateTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelBaseResponseModel>>;

    /**
     */
    apiUserSaleGenerateTokenPost(requestParameters: ApiUserSaleGenerateTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelBaseResponseModel>;

    /**
     * 
     * @param {UserLoginRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserSigninPostRaw(requestParameters: ApiUserSigninPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailModelBaseResponseModel>>;

    /**
     */
    apiUserSigninPost(requestParameters: ApiUserSigninPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailModelBaseResponseModel>;

    /**
     * 
     * @param {string} [token] 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserSsoCallbackGetRaw(requestParameters: ApiUserSsoCallbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailModelBaseResponseModel>>;

    /**
     */
    apiUserSsoCallbackGet(requestParameters: ApiUserSsoCallbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailModelBaseResponseModel>;

    /**
     * 
     * @param {UserUpdateRequestModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserUpdateUserPatchRaw(requestParameters: ApiUserUpdateUserPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanBaseResponseModel>>;

    /**
     */
    apiUserUpdateUserPatch(requestParameters: ApiUserUpdateUserPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanBaseResponseModel>;

    /**
     * 
     * @param {string} [firstname] 
     * @param {string} [lastname] 
     * @param {string} [email] 
     * @param {number} [departmentId] 
     * @param {string} [empcode] 
     * @param {string} [username] 
     * @param {number} [roleId] 
     * @param {string} [name] 
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserUserAllGetRaw(requestParameters: ApiUserUserAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserModelBaseResponsePagination>>;

    /**
     */
    apiUserUserAllGet(requestParameters: ApiUserUserAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserModelBaseResponsePagination>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserUserIdGetRaw(requestParameters: ApiUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserUpdateRequestModelBaseResponseModel>>;

    /**
     */
    apiUserUserIdGet(requestParameters: ApiUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserUpdateRequestModelBaseResponseModel>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     */
    async apiUserApprovalNotificationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MenuResponseModelListBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/User/approval-notification`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserApprovalNotificationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MenuResponseModelListBaseResponseModel> {
        const response = await this.apiUserApprovalNotificationGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserChangePasswordPostRaw(requestParameters: ApiUserChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/User/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserChangePasswordPost(requestParameters: ApiUserChangePasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringBaseResponseModel> {
        const response = await this.apiUserChangePasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserChangePasswordbyemailPostRaw(requestParameters: ApiUserChangePasswordbyemailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/User/change-passwordbyemail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserChangePasswordbyemailPost(requestParameters: ApiUserChangePasswordbyemailPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringBaseResponseModel> {
        const response = await this.apiUserChangePasswordbyemailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserCreateTestUserPostRaw(requestParameters: ApiUserCreateTestUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/User/create-test-user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserCreateTestUserPost(requestParameters: ApiUserCreateTestUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailModelBaseResponseModel> {
        const response = await this.apiUserCreateTestUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserCreateUserPostRaw(requestParameters: ApiUserCreateUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/User/create-user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserCreateUserPost(requestParameters: ApiUserCreateUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanBaseResponseModel> {
        const response = await this.apiUserCreateUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserCustomerVerifyTokenPostRaw(requestParameters: ApiUserCustomerVerifyTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerVerifyTokenResponseModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/User/customer-verify-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserCustomerVerifyTokenPost(requestParameters: ApiUserCustomerVerifyTokenPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerVerifyTokenResponseModelBaseResponseModel> {
        const response = await this.apiUserCustomerVerifyTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserDeleteUserIdPatchRaw(requestParameters: ApiUserDeleteUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanBaseResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserDeleteUserIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/User/delete-user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserDeleteUserIdPatch(requestParameters: ApiUserDeleteUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanBaseResponseModel> {
        const response = await this.apiUserDeleteUserIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserLoginADPostRaw(requestParameters: ApiUserLoginADPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/User/login-AD`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserLoginADPost(requestParameters: ApiUserLoginADPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailModelBaseResponseModel> {
        const response = await this.apiUserLoginADPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserRefreshtokenPostRaw(requestParameters: ApiUserRefreshtokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/User/refreshtoken`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserRefreshtokenPost(requestParameters: ApiUserRefreshtokenPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelBaseResponseModel> {
        const response = await this.apiUserRefreshtokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserRequestResetPasswordPostRaw(requestParameters: ApiUserRequestResetPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/User/request-reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserRequestResetPasswordPost(requestParameters: ApiUserRequestResetPasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringBaseResponseModel> {
        const response = await this.apiUserRequestResetPasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserSaleGenerateTokenPostRaw(requestParameters: ApiUserSaleGenerateTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/User/sale-generate-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserSaleGenerateTokenPost(requestParameters: ApiUserSaleGenerateTokenPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelBaseResponseModel> {
        const response = await this.apiUserSaleGenerateTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserSigninPostRaw(requestParameters: ApiUserSigninPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailModelBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/User/signin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserSigninPost(requestParameters: ApiUserSigninPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailModelBaseResponseModel> {
        const response = await this.apiUserSigninPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserSsoCallbackGetRaw(requestParameters: ApiUserSsoCallbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailModelBaseResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/User/sso-callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserSsoCallbackGet(requestParameters: ApiUserSsoCallbackGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailModelBaseResponseModel> {
        const response = await this.apiUserSsoCallbackGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserUpdateUserPatchRaw(requestParameters: ApiUserUpdateUserPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanBaseResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/User/update-user`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserUpdateUserPatch(requestParameters: ApiUserUpdateUserPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanBaseResponseModel> {
        const response = await this.apiUserUpdateUserPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserUserAllGetRaw(requestParameters: ApiUserUserAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserModelBaseResponsePagination>> {
        const queryParameters: any = {};

        if (requestParameters['firstname'] != null) {
            queryParameters['firstname'] = requestParameters['firstname'];
        }

        if (requestParameters['lastname'] != null) {
            queryParameters['lastname'] = requestParameters['lastname'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['departmentId'] != null) {
            queryParameters['department_id'] = requestParameters['departmentId'];
        }

        if (requestParameters['empcode'] != null) {
            queryParameters['empcode'] = requestParameters['empcode'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['roleId'] != null) {
            queryParameters['role_id'] = requestParameters['roleId'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/User/user-all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserUserAllGet(requestParameters: ApiUserUserAllGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserModelBaseResponsePagination> {
        const response = await this.apiUserUserAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserUserIdGetRaw(requestParameters: ApiUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserUpdateRequestModelBaseResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/api/User/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiUserUserIdGet(requestParameters: ApiUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserUpdateRequestModelBaseResponseModel> {
        const response = await this.apiUserUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
